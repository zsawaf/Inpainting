// generated by Fast Light User Interface Designer (fluid) version 1.0300

#ifndef VisCompUI_h
#define VisCompUI_h
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include "matting/matting.h"
#include "vxl_includes.h"
#include "inpainting/inpainting.h"
#include <FL/Fl_Group.H>
#include <FL/Fl_Menu_Bar.H>
#include "file/load_image.h"
#include <FL/Fl_Choice.H>
#include "gl/glutils.h"
#include "imdraw/imdraw.h"
#include <FL/Fl_Output.H>
#include <FL/Fl_Input.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Counter.H>
#include <FL/Fl_Check_Button.H>

class VisCompUI {
  vil_image_view<vil_rgb<vxl_byte> > left_im; 
  vil_image_view<vil_rgb<vxl_byte> > right_im; 
  matting M; 
  int inpainting_iterations_per_step; 
  inpainting *I; 
public:
  void show();
  vil_image_view<vil_rgb<vxl_byte> > interactive_load_image(vcl_string title);
  vil_image_view<vxl_byte> interactive_load_image1(vcl_string title);
  void set_matting(matting m);
  void display_matting_image(ImDraw* panel, matting::im_type imt);
  void display_matting_image1(ImDraw* panel, matting::im_type imt);
  void load_and_display_matting_image(ImDraw* panel, matting::im_type imt);
  void set_inpainting(inpainting* inp);
  void display_inpainting_image(ImDraw* panel, inpainting::im_type imt);
  void display_inpainting_image1(ImDraw* panel, inpainting::im_type imt);
  void load_and_display_inpainting_image(ImDraw* panel, inpainting::im_type imt);
  void load_and_display_inpainting_image1(ImDraw* panel, inpainting::im_type imt);
  VisCompUI();
  Fl_Double_Window *mainWindow;
  static Fl_Menu_Item menu_Main[];
private:
  void cb_Open_i(Fl_Menu_*, void*);
  static void cb_Open(Fl_Menu_*, void*);
  void cb_Open1_i(Fl_Menu_*, void*);
  static void cb_Open1(Fl_Menu_*, void*);
  void cb_Open2_i(Fl_Menu_*, void*);
  static void cb_Open2(Fl_Menu_*, void*);
  void cb_Save_i(Fl_Menu_*, void*);
  static void cb_Save(Fl_Menu_*, void*);
  void cb_Save1_i(Fl_Menu_*, void*);
  static void cb_Save1(Fl_Menu_*, void*);
  void cb_Quit_i(Fl_Menu_*, void*);
  static void cb_Quit(Fl_Menu_*, void*);
  void cb_Display_i(Fl_Menu_*, void*);
  static void cb_Display(Fl_Menu_*, void*);
  void cb_back1_i(Fl_Menu_*, void*);
  static void cb_back1(Fl_Menu_*, void*);
  void cb_back2_i(Fl_Menu_*, void*);
  static void cb_back2(Fl_Menu_*, void*);
  void cb_comp1_i(Fl_Menu_*, void*);
  static void cb_comp1(Fl_Menu_*, void*);
  void cb_comp2_i(Fl_Menu_*, void*);
  static void cb_comp2(Fl_Menu_*, void*);
  void cb_Run_i(Fl_Menu_*, void*);
  static void cb_Run(Fl_Menu_*, void*);
  void cb_Create_i(Fl_Menu_*, void*);
  static void cb_Create(Fl_Menu_*, void*);
  void cb_Display1_i(Fl_Menu_*, void*);
  static void cb_Display1(Fl_Menu_*, void*);
  void cb_source_i(Fl_Menu_*, void*);
  static void cb_source(Fl_Menu_*, void*);
  void cb_mask_i(Fl_Menu_*, void*);
  static void cb_mask(Fl_Menu_*, void*);
  void cb_inpainted_i(Fl_Menu_*, void*);
  static void cb_inpainted(Fl_Menu_*, void*);
  void cb_mask1_i(Fl_Menu_*, void*);
  static void cb_mask1(Fl_Menu_*, void*);
  void cb_Inpainted_i(Fl_Menu_*, void*);
  static void cb_Inpainted(Fl_Menu_*, void*);
  void cb_Drawing_i(Fl_Menu_*, void*);
  static void cb_Drawing(Fl_Menu_*, void*);
  void cb_Run1_i(Fl_Menu_*, void*);
  static void cb_Run1(Fl_Menu_*, void*);
  void cb_Step_i(Fl_Menu_*, void*);
  static void cb_Step(Fl_Menu_*, void*);
  void cb_Mask_i(Fl_Menu_*, void*);
  static void cb_Mask(Fl_Menu_*, void*);
  void cb_Mask1_i(Fl_Menu_*, void*);
  static void cb_Mask1(Fl_Menu_*, void*);
  static Fl_Menu_Item menu_Mode[];
  void cb_Browse_i(Fl_Menu_*, void*);
  static void cb_Browse(Fl_Menu_*, void*);
  void cb_Draw_i(Fl_Menu_*, void*);
  static void cb_Draw(Fl_Menu_*, void*);
  void cb_Draw1_i(Fl_Menu_*, void*);
  static void cb_Draw1(Fl_Menu_*, void*);
public:
  ImDraw *left_panel;
  Fl_Output *left_pos;
  Fl_Output *left_val;
  Fl_Input *left_mag;
private:
  void cb_left_mag_i(Fl_Input*, void*);
  static void cb_left_mag(Fl_Input*, void*);
public:
  Fl_Input *left_center_i;
private:
  void cb_left_center_i_i(Fl_Input*, void*);
  static void cb_left_center_i(Fl_Input*, void*);
public:
  Fl_Input *left_center_j;
private:
  void cb_left_center_j_i(Fl_Input*, void*);
  static void cb_left_center_j(Fl_Input*, void*);
public:
  Fl_Output *left_title;
private:
  void cb_Canonical_i(Fl_Button*, void*);
  static void cb_Canonical(Fl_Button*, void*);
public:
  ImDraw *right_panel;
  Fl_Output *right_pos;
  Fl_Output *right_val;
  Fl_Input *right_mag;
private:
  void cb_right_mag_i(Fl_Input*, void*);
  static void cb_right_mag(Fl_Input*, void*);
public:
  Fl_Input *right_center_i;
private:
  void cb_right_center_i_i(Fl_Input*, void*);
  static void cb_right_center_i(Fl_Input*, void*);
public:
  Fl_Input *right_center_j;
private:
  void cb_right_center_j_i(Fl_Input*, void*);
  static void cb_right_center_j(Fl_Input*, void*);
public:
  Fl_Output *right_title;
private:
  void cb_Canonical1_i(Fl_Button*, void*);
  static void cb_Canonical1(Fl_Button*, void*);
public:
  Fl_Double_Window *mattingDisplayWindow;
  static Fl_Menu_Item menu_Left[];
private:
  void cb_back11_i(Fl_Menu_*, void*);
  static void cb_back11(Fl_Menu_*, void*);
  void cb_back21_i(Fl_Menu_*, void*);
  static void cb_back21(Fl_Menu_*, void*);
  void cb_comp11_i(Fl_Menu_*, void*);
  static void cb_comp11(Fl_Menu_*, void*);
  void cb_comp21_i(Fl_Menu_*, void*);
  static void cb_comp21(Fl_Menu_*, void*);
  void cb_alpha_i(Fl_Menu_*, void*);
  static void cb_alpha(Fl_Menu_*, void*);
  void cb_object_i(Fl_Menu_*, void*);
  static void cb_object(Fl_Menu_*, void*);
  void cb_nback_i(Fl_Menu_*, void*);
  static void cb_nback(Fl_Menu_*, void*);
  void cb_ncomp_i(Fl_Menu_*, void*);
  static void cb_ncomp(Fl_Menu_*, void*);
  static Fl_Menu_Item menu_Right[];
public:
  Fl_Double_Window *inpaintingDisplayWindow;
  static Fl_Menu_Item menu_Left1[];
private:
  void cb_source1_i(Fl_Menu_*, void*);
  static void cb_source1(Fl_Menu_*, void*);
  void cb_mask2_i(Fl_Menu_*, void*);
  static void cb_mask2(Fl_Menu_*, void*);
  void cb_fill_i(Fl_Menu_*, void*);
  static void cb_fill(Fl_Menu_*, void*);
  void cb_unfilled_i(Fl_Menu_*, void*);
  static void cb_unfilled(Fl_Menu_*, void*);
  void cb_confidence_i(Fl_Menu_*, void*);
  static void cb_confidence(Fl_Menu_*, void*);
  void cb_inpainted1_i(Fl_Menu_*, void*);
  static void cb_inpainted1(Fl_Menu_*, void*);
  static Fl_Menu_Item menu_Right1[];
  void cb_source2_i(Fl_Menu_*, void*);
  static void cb_source2(Fl_Menu_*, void*);
  void cb_mask3_i(Fl_Menu_*, void*);
  static void cb_mask3(Fl_Menu_*, void*);
  void cb_fill1_i(Fl_Menu_*, void*);
  static void cb_fill1(Fl_Menu_*, void*);
  void cb_unfilled1_i(Fl_Menu_*, void*);
  static void cb_unfilled1(Fl_Menu_*, void*);
  void cb_confidence1_i(Fl_Menu_*, void*);
  static void cb_confidence1(Fl_Menu_*, void*);
  void cb_inpainted2_i(Fl_Menu_*, void*);
  static void cb_inpainted2(Fl_Menu_*, void*);
  void cb_Iterations_i(Fl_Input*, void*);
  static void cb_Iterations(Fl_Input*, void*);
  void cb_Patch_i(Fl_Counter*, void*);
  static void cb_Patch(Fl_Counter*, void*);
  void cb_patches_i(Fl_Check_Button*, void*);
  static void cb_patches(Fl_Check_Button*, void*);
  void cb_vectors_i(Fl_Check_Button*, void*);
  static void cb_vectors(Fl_Check_Button*, void*);
  void cb_intensities_i(Fl_Check_Button*, void*);
  static void cb_intensities(Fl_Check_Button*, void*);
  void cb_Brush_i(Fl_Counter*, void*);
  static void cb_Brush(Fl_Counter*, void*);
};
#endif
